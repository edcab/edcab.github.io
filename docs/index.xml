<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Edwin&#39;s Blog</title>
    <link>https://edwincabezas.dev/</link>
    <description>Recent content on Edwin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Apr 2021 08:06:25 +0600</lastBuildDate><atom:link href="https://edwincabezas.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Handling objects creating with Factory method</title>
      <link>https://edwincabezas.dev/posts/golang/design-patterns/factory-method/</link>
      <pubDate>Thu, 08 Apr 2021 08:06:25 +0600</pubDate>
      
      <guid>https://edwincabezas.dev/posts/golang/design-patterns/factory-method/</guid>
      <description>Factory Method Is a pattern of type creational that delegates the construction of objects to an interface. The interface has a method that return a type of specific object.
Problem The company TransportPassengers has to transport many passengers after your workday.
Solution First of all, we have to create our factory:
func GetTransportType(quPassengers int) (product.ITransport, error) { if quPassengers &amp;gt;= 1 &amp;amp;&amp;amp; quPassengers &amp;lt;=5 { return concrete.NewTaxi(), nil } if quPassengers &amp;gt;= 6 &amp;amp;&amp;amp; quPassengers &amp;lt;=15 { return concrete.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://edwincabezas.dev/posts/introduction/</link>
      <pubDate>Mon, 01 Mar 2021 08:06:25 +0600</pubDate>
      
      <guid>https://edwincabezas.dev/posts/introduction/</guid>
      <description>Greeting! This is an introduction post. This post tests the followings:
 Appear post page  </description>
    </item>
    
  </channel>
</rss>
